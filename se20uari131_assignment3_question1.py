# -*- coding: utf-8 -*-
"""Se20uari131_Assignment3_Question1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ZN3NgQiHdmxAwKk9tQPDZ9uTSCy0DRI
"""

processes = ["P1", "P2", "P3", "P4"]
arrival_time = [0, 4, 5, 6]
burst_time = [24, 3, 3, 12]
priority = [3, 1, 4, 2]

n = len(processes)

def calculate_waiting_time(burst_time, waiting_time, turnaround_time):
    waiting_time[0] = 0
    for i in range(1, n):
        waiting_time[i] = turnaround_time[i - 1] - burst_time[i - 1]

def calculate_turnaround_time(burst_time, waiting_time, turnaround_time):
    for i in range(n):
        turnaround_time[i] = burst_time[i] + waiting_time[i]

def fcfs_scheduling():
    waiting_time, turnaround_time = [0] * n, [0] * n

    for i in range(1, n):
        waiting_time[i] = burst_time[i - 1] + waiting_time[i - 1]

    calculate_turnaround_time(burst_time, waiting_time, turnaround_time)

    return waiting_time, turnaround_time

def sjf_scheduling():
    waiting_time, turnaround_time = [0] * n, [0] * n

    for i in range(n):
        waiting_time[i] = 0
        for j in range(i):
            waiting_time[i] += burst_time[j]

    calculate_turnaround_time(burst_time, waiting_time, turnaround_time)

    return waiting_time, turnaround_time

def priority_scheduling():
    waiting_time, turnaround_time = [0] * n, [0] * n

    for i in range(1, n):
        waiting_time[i] = burst_time[i - 1] + waiting_time[i - 1]

    calculate_turnaround_time(burst_time, waiting_time, turnaround_time)

    return waiting_time, turnaround_time

def round_robin_scheduling(quantum):
    waiting_time, turnaround_time = [0] * n, [0] * n
    remaining_time = [0] * n

    for i in range(n):
        remaining_time[i] = burst_time[i]

    t = 0
    while True:
        done = True
        for i in range(n):
            if remaining_time[i] > 0:
                done = False

                if remaining_time[i] > quantum:
                    t += quantum
                    remaining_time[i] -= quantum
                else:
                    t = t + remaining_time[i]
                    waiting_time[i] = t - burst_time[i]
                    remaining_time[i] = 0

        if done:
            break

    calculate_turnaround_time(burst_time, waiting_time, turnaround_time)

    return waiting_time, turnaround_time

fcfs_waiting_time, fcfs_turnaround_time = fcfs_scheduling()
sjf_waiting_time, sjf_turnaround_time = sjf_scheduling()
priority_waiting_time, priority_turnaround_time = priority_scheduling()
rr_waiting_time, rr_turnaround_time = round_robin_scheduling(4)

def display_schedule_results(algorithm_name, waiting_time, turnaround_time):
    print(f"\n{algorithm_name} Scheduling:")
    print("Process\t\tWT\t\tTAT")
    for i in range(n):
        print(f"{processes[i]}\t\t{waiting_time[i]}\t\t{turnaround_time[i]}")
    print(f"Average WT: {sum(waiting_time)/n}")
    print(f"Average TAT: {sum(turnaround_time)/n}")

display_schedule_results("FCFS", fcfs_waiting_time, fcfs_turnaround_time)
display_schedule_results("SJF", sjf_waiting_time, sjf_turnaround_time)
display_schedule_results("Priority", priority_waiting_time, priority_turnaround_time)
display_schedule_results("Round Robin", rr_waiting_time, rr_turnaround_time)

average_waiting_time = {
    "FCFS": sum(fcfs_waiting_time) / n,
    "SJF": sum(sjf_waiting_time) / n,
    "Priority": sum(priority_waiting_time) / n,
    "Round Robin": sum(rr_waiting_time) / n
}

average_turnaround_time = {
    "FCFS": sum(fcfs_turnaround_time) / n,
    "SJF": sum(sjf_turnaround_time) / n,
    "Priority": sum(priority_turnaround_time) / n,
    "Round Robin": sum(rr_turnaround_time) / n
}

most_suitable_algorithm = min(average_waiting_time, key=average_waiting_time.get)

print(f"\nMost suitable scheduling algorithm is {most_suitable_algorithm} with average waiting time of {average_waiting_time[most_suitable_algorithm]} and average turnaround time of {average_turnaround_time[most_suitable_algorithm]}")